Rich Internet Applications (RIA)
RIA using HTML + CSS + JS => SPA (Single Page Application)

SPA + HTML5 Features => PWA (Progressing Web Application)

jQuery function


1. Separation Of Concerns (Single Responsibility Principle - (SRP))

ES6 (ESNext, ECMAScript 6)
1. let
2. const
3. Array destructuring
4. Rest operator (Array)
5. Spread operator (Array)
6. Object destructuring
7. Rest operator (Object)
8. Spread operator (Object)
9. Default arguments
10. Arrow functions
11. Template strings
12. Classes

https://es6-features.org/

TypeScript
    Typescript = JavaScript + Type Safety

public static class Calculator{
    public static int add(int x, int y){
        return x + y;
    }
}


function add(x, y){
    return x + y;
}

add(10,20)
add(10, '20')
add(10, 'abc')
add([10,20], [30,40])
add([10,20],[30,[40,50]])
add([10,20],[30,['40',50]])
add([10,20],[30,['abc',50]])
add(function(){ return [10,20]; }, function(){ return [30,['abc',50]]; })
add([function(){ return [10,20]; }, function(){ return [30,['abc',50]]; }])
add(10)
add()
add(10,20,30,40,50)

function add(x,y){
    if ( typef x !== 'number' || typef y !== 'number')
        throw new Error('Invalid argument(s)!');
    return x + y;
}

function add(...args){
    function parseArg(n){
        if (typeof n === 'function') return parseArg(n());
        if (Array.isArray(n)) return add(...n);
        return isNaN(n) ? 0 : parseInt(n);
    }
    return args.length <= 1 ? parseArg(args[0]) : parseArg(args[0]) + add(args.slice(1));
}


let x : number = 10;
function add(x : number, y : number) : number {
    return x + y;
}

add('abc',100)

    |
    | 
    V
    tsc
    |
    |
    V

let x = 10;
function add(x, y) {
    return x + y;
}

https://typescriptlang.org


Building Blocks of Angular
    1. Component
        A resuable UI object
        Encapsulates Presentation + UI Behavior + State
            Presentation - How the data is displayed
            UI Behavior - What need to happen when the user interact with the app
            State - data
        Components can be composed to create complex UI
        Application = composition of components

    2. Directive
        Low level DOM manipulation
            showing DOM nodes
            removing DOM nodes
            conditional display of DOM notes
            adding / removing CSS classes to DOM nodes
            manipulating styles for a DOM node
        Attribute Directive
            manipulates the attributes of existing DOM nodes
            DOESN'T change the structure of the DOM tree
                Means that it doesnt add/remove DOM nodes
            is wrapped in []
        Structural Directive
            CHANGES the structure of the DOM tree by adding new DOM nodes or removing existing DOM nodes
            prefixed with a *

    3. Pipe
        Used to transform the data for presentation purposes
        Offer performance advantage

    4. Service
        Non UI logic of the application

    5. Module
        Organize the other building blocks
        Registry of application entities
        Dependency Injection is taken care
        Minimum of 1 module should be there
        Application initialization starts with a module
        